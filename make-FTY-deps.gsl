.template 0

# This GSL script should list dependencies of a 42ity component
# (top-level <use> tags from its project.xml) in a form usable
# by the FTY dispatcher repo master Makefile concept. Call like:
#    gsl -script:make-FTY-deps.gsl fty-example/project.xml
# You can call this for several input XMLs, the script will be
# re-executed for each; to make one common output file do:
#    rm -f .autodeps.all-fty ; gsl -script:make-FTY-deps.gsl -make_depfile_name:.autodeps.all-fty -make_depfile_mode:a fty*/project.xml

function map_project_makename(prj)
    # Certain projects are named differently in the Makefile
    # (e.g. expanded variables for master/version builds) -
    # so we map them here and below

    # if regexp.match ("^(cxxtools|czmq|libzmq)", my.prj)
    #    return "$(my.prj:no)-\$(SUFFIX)"
    # endif

    # These should "just be there" from the OS, skip the build deps
    if regexp.match ("^(lib)?(openssl|lua|sasl|curl|avahi|amqp|qpid|(net-?|ucd-?)?snmp|augeas)", my.prj)
        return ""
    endif

    if regexp.match ("^(magic|cidr)", my.prj)
        return "lib$(my.prj)"
    endif

    if ("log4cplus" = my.prj)
        return "\$(COMPONENT_LOG4CPLUS)"
    endif

    if ("czmq" = my.prj)
        return "\$(COMPONENT_CZMQ)"
    endif

    if ("malamute" = my.prj)
        return "\$(COMPONENT_MLM)"
    endif

    if ("libsodium" = my.prj)
        return "\$(COMPONENT_LIBSODIUM)"
    endif

    if ("libnutclient" = my.prj)
        return "nut"
    endif

    # Typo fix
    if ("fty_shm" = my.prj)
        return "fty-shm"
    endif

    return my.prj
endfunction

# For now return the same string as Makefile into Dot file
function map_project_dotname(prj)
    return map_project_makename(my.prj)
endfunction


# Take a project.xml and look at its use tags:
function parse_project_uses_Makefile(xml)
    if !defined (my.xml.name)
        abort "E: required attribute 'name' not defined in a 'project' tag"
    endif
    my.project_makename = map_project_makename(my.xml.name)

    my.depline = "\$(BUILD_OBJ_DIR)/$(my.project_makename:no)/.configured:"

    # Skim only top level
    for my.xml.use
        if !defined (use.project)
            abort "E: required attribute 'project' not defined in a 'use' tag"
        endif
        my.use_makename = map_project_makename(use.project)
        if (defined(my.use_makename) & (my.use_makename <> ""))
            my.depline +=  " \\\n    \$(BUILD_OBJ_DIR)/$(my.use_makename:no)/.installed"
        endif
    endfor
    my.depline += "\n\n"
    return my.depline
endfunction


# Take a project.xml and look at its use tags:
#    https://www.graphviz.org/pdf/dotguide.pdf
#    https://en.wikipedia.org/wiki/DOT_(graph_description_language)
function parse_project_uses_DOT(xml)
    if !defined (my.xml.name)
        abort "E: required attribute 'name' not defined in a 'project' tag"
    endif
    my.project_dotname = map_project_dotname(my.xml.name)

    my.depline = ""

    # Skim only top level
    for my.xml.use
        if !defined (use.project)
            abort "E: required attribute 'project' not defined in a 'use' tag"
        endif
        my.use_dotname = map_project_dotname(use.project)
        if (defined(my.use_dotname) & (my.use_dotname <> ""))
            my.depline += "\t\"$(my.project_dotname:no)\" -> \"$(my.use_dotname:no)\";\n"
        endif
    endfor
    return my.depline
endfunction


#######################################################
# These can be passed along with `gsl -var:value`
if !defined(switches.make_depfile_name)
    switches.make_depfile_name ?= ".autodeps.$(project.name)"
endif
# "a"ppend or "w"rite anew?
if !defined (switches.make_depfile_mode)
    switches.make_depfile_mode ?= "w"
endif


.if switches.make_depfile_mode = "skip"
    echo "NOT Processing '$(project.name)' into Makefile format"
.else
    echo "Processing '$(project.name)' into Makefile format"
    project.make_depline = parse_project_uses_Makefile(project)
#    echo "$(project.make_depline:no)"

.if switches.make_depfile_mode = "w"
.    output switches.make_depfile_name
.else
.    append switches.make_depfile_name
.endif
>$(project.make_depline:no)
.close

    echo "Processed '$(project.name)' into Makefile format"
.endif

#######################################################
# These can be passed along with `gsl -var:value`
if !defined(switches.dot_depfile_name)
    switches.dot_depfile_name ?= ".autodeps.$(project.name).dot"
endif
# "a"ppend or "w"rite anew?
if !defined (switches.dot_depfile_mode)
    switches.dot_depfile_mode ?= "w"
endif

.if switches.dot_depfile_mode = "skip"
    echo "NOT Processing '$(project.name)' into DOT format"
.else
    echo "Processing '$(project.name)' into DOT format"
    project.dot_depline = parse_project_uses_DOT(project)
#    echo "$(project.dot_depline:no)"

.if switches.dot_depfile_mode = "w"
.    output switches.dot_depfile_name
.else
.    append switches.dot_depfile_name
.endif
>$(project.dot_depline:no)
.close

    echo "Processed '$(project.name)' into DOT format"
.endif

.endtemplate
